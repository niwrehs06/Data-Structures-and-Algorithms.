QUEUE

#include <iostream>
#include <vector>
#include <string>
#include <chrono>
#include <thread>
#include <set>

using namespace std;

class Peeps {
public:
    string name;
    string ticket_number;

    Peeps(string name, string ticket) : name(name), ticket_number(ticket) {}
};

class TicketQueue {
private:
    vector<Peeps> line;
    int ticketCounter;
    set<string> issuedTickets;

public:
    TicketQueue() : ticketCounter(1) {}

    void addToQueue(const string& name) {
        string ticket_number = formatTicketNumber(ticketCounter++);
        line.emplace_back(name, ticket_number);
        cout << name << " added to the queue with Ticket #" << ticket_number << endl;
    }

    void autoProcessQueue() {
        if (!line.empty()) {
            Peeps frontPerson = line.front();
            line.erase(line.begin());
            cout << "\nAfter 1 minute...\n";
            cout << "Dequeued: " << frontPerson.name << " received a ticket (Ticket #" << frontPerson.ticket_number << ")" << endl;
            issuedTickets.insert(frontPerson.ticket_number);
        } else {
            cout << "Queue is empty." << endl;
        }
    }

    bool isLineEmpty() {
        return line.empty();
    }

    int currentSize() {
        return line.size();
    }

    string nextInLine() {
        if (!line.empty()) {
            return line.front().name + " (Ticket #" + line.front().ticket_number + ")";
        }
        return "No one in line.";
    }

    int positionInQueue(const string& nameOrTicket) {
        for (int i = 0; i < line.size(); ++i) {
            if (line[i].name == nameOrTicket || line[i].ticket_number == nameOrTicket) {
                return i + 1;
            }
        }
        return -1;
    }

    bool hasReceivedTicket(const string& nameOrTicket) {
        return issuedTickets.find(nameOrTicket) != issuedTickets.end();
    }

private:
    string formatTicketNumber(int num) {
        return (num < 10 ? "00" : (num < 100 ? "0" : "")) + to_string(num);
    }
};

int main() {
    TicketQueue concertQueue;
    int userChoice;
    bool menuDisplayed = false;

    cout << "Welcome to Olivia Rodrigo's Concert Ticketing System!" << endl;

    auto lastProcessTime = chrono::steady_clock::now();

    while (true) {
        auto currentTime = chrono::steady_clock::now();
        if (chrono::duration_cast<chrono::minutes>(currentTime - lastProcessTime).count() >= 1) {
            concertQueue.autoProcessQueue();
            lastProcessTime = currentTime;
            cout << "Queue size: " << concertQueue.currentSize() << endl;
            cout << "Next in line: " << concertQueue.nextInLine() << endl;
        }

        if (!menuDisplayed) {
            cout << "\n\t1. Enqueue a person\n\t2. Check your position in the Queue\n\t3. Exit\n";
            menuDisplayed = true;
        }

        cout << "\nChoose an option: ";
        cin >> userChoice;

        switch (userChoice) {
            case 1: {
                string name;
                cout << "Enter the name: ";
                cin >> name; 
                concertQueue.addToQueue(name);
                cout << "Queue size: " << concertQueue.currentSize() << endl;
                break;
            }
            case 2: {
                string nameOrTicket;
                cout << "Enter your name or ticket number: ";
                cin >> nameOrTicket;

                if (concertQueue.hasReceivedTicket(nameOrTicket)) {
                    cout << nameOrTicket << " has already received a ticket." << endl;
                } else {
                    int pos = concertQueue.positionInQueue(nameOrTicket);
                    if (pos != -1) {
                        cout << nameOrTicket << " is currently at position " << pos << " in the queue.\n" << endl;
                    } else {
                        cout << nameOrTicket << " is not in the queue.\n" << endl;
                    }
                }
                break;
            }
            case 3: {
                cout << "Exiting the system. Thank you!" << endl;
                return 0;
            }
            default: {
                cout << "Invalid option. Please try again." << endl;
                break;
            }
        }

        this_thread::sleep_for(chrono::seconds(1));
    }

    return 0;
}